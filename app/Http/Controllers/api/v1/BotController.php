<?php

namespace App\Http\Controllers\api\v1;

use App\Http\Services\ChatServices\AddNewChatService;
use App\Http\Services\ChatServices\CheckChatAvailability;
use App\Http\Services\ChatServices\GetChatsCountService;
use App\Models\Chat;
use Illuminate\Http\Client\Request;
use Illuminate\Support\Facades\Log;

class BotController extends ApiBaseController
{
    public function handle()
    {
        Log::alert('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª: ' . $this->chatId);
        if ($this->message == '/start') {
            if (!app(CheckChatAvailability::class)->checkChat($this->chatId)) {
                app(AddNewChatService::class)->addNew($this->chatId);
            }
            $text = '–í–µ–±–∏–Ω–∞—Ä —É–∂–µ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª, —Å–∫–æ—Ä–µ–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è!' . "\n\n"
                . '–°—Å—ã–ª–∫–∞: <a href="https://igoe.ru/mt/zoom/">https://igoe.ru/mt/zoom/</a>';
            try {
                $responseText = $this->telegram->sendMessage([
                    'chat_id' => $this->chatId,
                    'text' => $text,
                    'parse_mode' => 'HTML'
                ]);
            } catch (\Exception $e) {
                \Log::alert($e->getMessage());
                return;
            }

//            $menu = [
//                [
//                    ['text' => '–°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å—å', 'url' => 'https://ya.ru']
//                ]
//            ];
//
//            $this->telegram->sendMessage([
//                'chat_id' => $this->chatId,
//                'text' => 'üü° –ó–∞–ø–∏—Å—å –≤–µ–±–∏–Ω–∞—Ä–∞ üü°' . "\n\n" . '–î–æ—Å—Ç—É–ø–Ω–∞ 24 —á–∞—Å–∞!',
//                'reply_markup' => json_encode(['inline_keyboard' => $menu])
//            ]);


//            sleep(30);
//
//            $text2 = '–ñ–∏–≤–æ–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ¬´–¢–µ–∞—Ç—Ä –¥–æ–º–∞: —Å –¥–µ—Ç—å–º–∏ –∏ –¥–ª—è –¥–µ—Ç–µ–π¬ª —Å–æ—Å—Ç–æ–∏—Ç—Å—è –≤ –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ –≤ –∑—É–º!  –¢–∞–∫ –º—ã –±—É–¥–µ–º –±–ª–∏–∂–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É‚ò∫Ô∏è' . "\n\n"
//                . '–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É Zoom –æ–Ω–∞ –ë–ï–°–ü–õ–ê–¢–ù–ê–Ø ' . "\n\n"
//                . '‚ñ∂Ô∏è–°—Å—ã–ª–∫–∏ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞ –ø–ª–∞–Ω—à–µ—Ç –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω: ' . "\n\n"
//                . '<a href="https://play.google.com/store/apps/details?id=us.zoom.videomeetings&hl=ru">https://play.google.com/store/apps/details?id=us.zoom.videomeetings&hl=ru</a>' . "\n\n"
//                . '‚ñ∂Ô∏è–ï—Å–ª–∏ —É –≤–∞—Å iPhone '  . "\n\n"
//                . '<a href="https://apps.apple.com/ru/app/zoom-cloud-meetings/id546505307">https://apps.apple.com/ru/app/zoom-cloud-meetings/id546505307</a>';
//            try {
//                $responseText = $this->telegram->sendMessage([
//                    'chat_id' => $this->chatId,
//                    'text' => $text2,
//                    'parse_mode' => 'HTML'
//                ]);
//            } catch (\Exception $e) {
//                \Log::alert($e->getMessage());
//                return;
//            }
        } elseif ($this->message == '/getcount') {
            $count = app(GetChatsCountService::class)->getCount();
            if (empty($count)) {
                return;
            }
            try {
                $responseText = $this->telegram->sendMessage([
                    'chat_id' => $this->chatId,
                    'text' => $count,
                    'parse_mode' => 'HTML'
                ]);
            } catch (\Exception $e) {
                \Log::alert($e->getMessage());
                return;
            }
        } elseif (mb_strtolower($this->message) == '—Ç–µ–ø–ª–æ') {
            if ($this->chatId == 738833121) {
                $this->telegram->sendDocument([
                    'chat_id' => $this->chatId,
                    'document' => 'BQACAgIAAxkBAANKYYLTVxWSgac_A_XWXrPpCNrxksEAAosTAAIwHRlIYofL78FcAnYhBA',
                ]);
            }
        }
    }
}

